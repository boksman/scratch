import inspect
from dataclasses import fields, is_dataclass
from typing import Dict, Type, Optional

def validate_dataclass(dictionary: Dict[str, Optional], dataclass_type: Type) -> Optional[int]:
    if not is_dataclass(dataclass_type):
        return 400  # Bad Request - The provided type is not a dataclass
    
    excluded_fields = getattr(dataclass_type, '__exclude_fields__', [])
    
    for field in fields(dataclass_type):
        if field.name in excluded_fields:
            continue
        
        field_value = dictionary.get(field.name)
        
        if field_value is None:
            continue  # Skip optional fields
        
        if not isinstance(field_value, field.type):
            return 422  # Unprocessable Entity - Field value has an incompatible type
    
    return None
