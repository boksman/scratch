def convert_to_json(data):
    class CustomEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, (Class1, Class2, Class3)):
                return {
                    '__class__': obj.__class__.__name__,
                    '__dict__': obj.__dict__
                }
            return super().default(obj)

    json_data = json.dumps(data, cls=CustomEncoder)
    return json_data

def parse_from_json(json_data):
    class_mapping = {
        'Class1': Class1,
        'Class2': Class2,
        'Class3': Class3
    }

    def object_decoder(obj):
        if '__class__' in obj:
            class_name = obj['__class__']
            if class_name in class_mapping:
                target_class = class_mapping[class_name]
                new_obj = target_class()
                new_obj.__dict__ = obj['__dict__']
                return new_obj
        return obj

    data = json.loads(json_data, object_hook=object_decoder)
    return data
